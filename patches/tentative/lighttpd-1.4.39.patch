diff -ur lighttpd1.4.orig/configure.ac lighttpd1.4.patched/configure.ac
--- lighttpd1.4.orig/configure.ac	2016-05-06 15:58:16.141431916 +0200
+++ lighttpd1.4.patched/configure.ac	2016-05-06 15:58:16.169431915 +0200
@@ -710,6 +710,33 @@
 LIGHTTPD_VERSION_ID=`echo $PACKAGE_VERSION | $AWK -F '.' '{print "(" $1 " << 16 | " $2 " << 8 | " $3 ")"}'`
 AC_DEFINE_UNQUOTED([LIGHTTPD_VERSION_ID], [$LIGHTTPD_VERSION_ID], [lighttpd-version-id])
 
+
+dnl check for websocket support
+AC_C_BIGENDIAN
+if test "x$ac_cv_c_bigendian" = "xyes"; then
+    WEBSOCKET_CFLAGS="-DWORDS_BIGENDIAN"
+fi
+AC_MSG_CHECKING(whether --with-websocket option specified)
+AC_ARG_WITH([websocket],
+            AC_HELP_STRING([--with-websocket@<:@=all/rfc-6455/ietf-00@:>@],
+                           [support WebSocket version@<:@default=no@:>@]),
+            [ with_websocket=$withval ], [ with_websocket=no ])
+AC_MSG_RESULT(${with_websocket})
+if test "x${with_websocket}" = "xyes" -o \
+        "x${with_websocket}" = "xall" -o "x${with_websocket}" = "xALL" ; then
+    with_websocket=all
+    WEBSOCKET_CFLAGS="$WEBSOCKET_CFLAGS -D_MOD_WEBSOCKET_SPEC_IETF_00_ -D_MOD_WEBSOCKET_SPEC_RFC_6455_"
+elif test "x${with_websocket}" = "xrfc-6455" -o "x${with_websocket}" = "xRFC-6455" ; then
+    WEBSOCKET_CFLAGS="$WEBSOCKET_CFLAGS -D_MOD_WEBSOCKET_SPEC_RFC_6455_"
+elif test "x${with_websocket}" = "xietf-00" -o "x${with_websocket}" = "xIETF-00" ; then
+    WEBSOCKET_CFLAGS="$WEBSOCKET_CFLAGS -D_MOD_WEBSOCKET_SPEC_IETF_00_"
+elif test "x${with_websocket}" != "xno" ; then
+    AC_MSG_ERROR([websocket option is invalid. plz specify all, ietf-00, rfc-6455])
+fi
+AC_SUBST(with_websocket)
+AC_SUBST(WEBSOCKET_CFLAGS)
+AM_CONDITIONAL(WITH_WEBSOCKET, test x$with_websocket != xno)
+
 AC_CONFIG_FILES([Makefile src/Makefile
 		 doc/config/conf.d/Makefile \
 		 doc/config/vhosts.d/Makefile \
@@ -842,6 +869,13 @@
 	disable_feature="$disable_feature $features"
 fi
 
+dnl websocket
+plugins="mod_websocket"
+if test "x${with_websocket}" != "xno"; then
+	do_build="$do_build $plugins(${with_websocket})"
+else
+	no_build="$no_build $plugins"
+fi
 
 dnl output
 
diff -ur lighttpd1.4.orig/src/base.h lighttpd1.4.patched/src/base.h
--- lighttpd1.4.orig/src/base.h	2016-05-06 15:58:16.153431915 +0200
+++ lighttpd1.4.patched/src/base.h	2016-05-06 15:58:16.169431915 +0200
@@ -340,7 +340,8 @@
 	CON_STATE_WRITE,
 	CON_STATE_RESPONSE_END,
 	CON_STATE_ERROR,
-	CON_STATE_CLOSE
+	CON_STATE_CLOSE,
+	CON_STATE_READ_CONTINUOUS
 } connection_state_t;
 
 typedef enum { COND_RESULT_UNSET, COND_RESULT_FALSE, COND_RESULT_TRUE } cond_result_t;
diff -ur lighttpd1.4.orig/src/connections.c lighttpd1.4.patched/src/connections.c
--- lighttpd1.4.orig/src/connections.c	2016-05-06 15:58:16.153431915 +0200
+++ lighttpd1.4.patched/src/connections.c	2016-05-06 15:58:16.169431915 +0200
@@ -1002,6 +1002,8 @@
 		}
 
 		break;
+	case CON_STATE_READ_CONTINUOUS:
+		break;
 	default: break;
 	}
 
@@ -1076,7 +1078,8 @@
 	}
 
 	if (con->state == CON_STATE_READ ||
-	    con->state == CON_STATE_READ_POST) {
+	    con->state == CON_STATE_READ_POST ||
+		con->state == CON_STATE_READ_CONTINUOUS) {
 		connection_handle_read_state(srv, con);
 	}
 
@@ -1330,6 +1333,9 @@
 				/* fallthrough */
 			case HANDLER_WAIT_FOR_EVENT:
 				/* come back here */
+				if (con->state == CON_STATE_READ_CONTINUOUS) {
+					break;
+				}
 				connection_set_state(srv, con, CON_STATE_HANDLE_REQUEST);
 
 				break;
@@ -1469,12 +1475,17 @@
 			break;
 		case CON_STATE_READ_POST:
 		case CON_STATE_READ:
+		case CON_STATE_READ_CONTINUOUS:
 			if (srv->srvconf.log_state_handling) {
 				log_error_write(srv, __FILE__, __LINE__, "sds",
 						"state for fd", con->fd, connection_get_state(con->state));
 			}
 
 			connection_handle_read_state(srv, con);
+			if (con->state == CON_STATE_READ_CONTINUOUS) {
+				plugins_call_read_continuous(srv, con);
+			}
+
 			break;
 		case CON_STATE_WRITE:
 			if (srv->srvconf.log_state_handling) {
@@ -1639,6 +1650,9 @@
 			fdevent_event_del(srv->ev, &(con->fde_ndx), con->fd);
 		}
 		break;
+	case CON_STATE_READ_CONTINUOUS:
+		/* leave up to plugins */
+		break;
 	default:
 		fdevent_event_del(srv->ev, &(con->fde_ndx), con->fd);
 		break;
diff -ur lighttpd1.4.orig/src/connections-glue.c lighttpd1.4.patched/src/connections-glue.c
--- lighttpd1.4.orig/src/connections-glue.c	2016-05-06 15:58:16.153431915 +0200
+++ lighttpd1.4.patched/src/connections-glue.c	2016-05-06 15:58:16.169431915 +0200
@@ -14,6 +14,7 @@
 	case CON_STATE_REQUEST_END: return "req-end";
 	case CON_STATE_RESPONSE_START: return "resp-start";
 	case CON_STATE_RESPONSE_END: return "resp-end";
+	case CON_STATE_READ_CONTINUOUS: return "read-continuous";
 	default: return "(unknown)";
 	}
 }
@@ -31,6 +32,7 @@
 	case CON_STATE_REQUEST_END: return "Q";
 	case CON_STATE_RESPONSE_START: return "s";
 	case CON_STATE_RESPONSE_END: return "S";
+	case CON_STATE_READ_CONTINUOUS: return "F";
 	default: return "x";
 	}
 }
diff -ur lighttpd1.4.orig/src/Makefile.am lighttpd1.4.patched/src/Makefile.am
--- lighttpd1.4.orig/src/Makefile.am	2016-05-06 15:58:16.149431916 +0200
+++ lighttpd1.4.patched/src/Makefile.am	2016-05-06 15:58:16.169431915 +0200
@@ -267,6 +267,15 @@
 mod_accesslog_la_LDFLAGS = -module -export-dynamic -avoid-version
 mod_accesslog_la_LIBADD = $(common_libadd)
 
+if WITH_WEBSOCKET
+lib_LTLIBRARIES += mod_websocket.la
+
+mod_websocket_la_SOURCES = mod_websocket_base64.h mod_websocket_base64.c mod_websocket_sha1.h mod_websocket_sha1.c mod_websocket_socket.h mod_websocket_socket.c mod_websocket_handshake.c mod_websocket_frame.c mod_websocket.h mod_websocket.c 
+mod_websocket_la_CFLAGS = $(AM_CFLAGS) $(WEBSOCKET_CFLAGS)
+mod_websocket_la_LDFLAGS = -module -export-dynamic -avoid-version -no-undefined
+mod_websocket_la_LIBADD = $(PCRE_LIB) $(common_libadd)
+endif
+
 
 hdr = server.h base64.h buffer.h network.h log.h keyvalue.h \
 	response.h request.h fastcgi.h chunk.h \
diff -ur lighttpd1.4.orig/src/mod_websocket.c lighttpd1.4.patched/src/mod_websocket.c
--- lighttpd1.4.orig/src/mod_websocket.c	2016-05-06 15:58:16.153431915 +0200
+++ lighttpd1.4.patched/src/mod_websocket.c	2016-05-06 15:58:16.169431915 +0200
@@ -126,21 +126,9 @@
     }
     port = buffer_init();
     if (du->type == TYPE_INTEGER) {
-        if (buffer_copy_long(port, ((data_integer *)du)->value) != 0) {
-            buffer_free(port);
-            DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "no memory");
-            hctx->con->http_status = 500;
-            hctx->con->mode = DIRECT;
-            return -1;
-        }
+        buffer_copy_int(port, ((data_integer *)du)->value);
     } else if (du->type == TYPE_STRING && !buffer_is_empty(((data_string *)du)->value)) {
-        if (buffer_copy_string_buffer(port, ((data_string *)du)->value) != 0) {
-            buffer_free(port);
-            DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "no memory");
-            hctx->con->http_status = 500;
-            hctx->con->mode = DIRECT;
-            return -1;
-        }
+        buffer_copy_buffer(port, ((data_string *)du)->value);
     } else {
         DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "port section is invalid");
         buffer_free(port);
@@ -474,7 +462,7 @@
         p->config_storage[i] = s;
 
         ca = ((data_config *)(srv->config_context->data[i]))->value;
-        if (config_insert_values_global(srv, ca, cv) != 0) {
+        if (config_insert_values_global(srv, ca, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION) != 0) {
             log_error_write(srv, __FILE__, __LINE__, "s", "no memory.");
             return HANDLER_ERROR;
         }
@@ -492,7 +480,7 @@
                 return HANDLER_ERROR;
             }
             ext = data_array_init();
-            buffer_copy_string_buffer(ext->key, ((data_array *)(da->value->data[j]))->key);
+            buffer_copy_buffer(ext->key, ((data_array *)(da->value->data[j]))->key);
             ext->value = array_init_array(((data_array *)(da->value->data[j]))->value);
             ext->is_index_key = ((data_array *)(da->value->data[j]))->is_index_key;
             array_insert_unique(s->exts, (data_unset *)ext);
diff -ur lighttpd1.4.orig/src/mod_websocket_frame.c lighttpd1.4.patched/src/mod_websocket_frame.c
--- lighttpd1.4.orig/src/mod_websocket_frame.c	2016-05-06 15:58:16.149431916 +0200
+++ lighttpd1.4.patched/src/mod_websocket_frame.c	2016-05-06 16:30:58.657349838 +0200
@@ -43,40 +43,46 @@
     if (siz == 0 && (type == MOD_WEBSOCKET_FRAME_TYPE_TEXT || type == MOD_WEBSOCKET_FRAME_TYPE_BIN)) {
         return 0;
     }
-    b = chunkqueue_get_append_buffer(hctx->tocli);
+    b = buffer_init();
+
     if (!b) {
         DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "no memory");
         return -1;
     }
     switch (type) {
     case MOD_WEBSOCKET_FRAME_TYPE_TEXT:
-        buffer_append_memory(b, (const char *)&head, 1);
-        buffer_append_memory(b, payload, siz);
-        buffer_append_memory(b, (const char *)&tail, 1);
+        buffer_append_string_len(b, (const char *)&head, 1);
+        buffer_append_string_len(b, payload, siz);
+        buffer_append_string_len(b, (const char *)&tail, 1);
         break;
     case MOD_WEBSOCKET_FRAME_TYPE_BIN:
-        buffer_append_memory(b, (const char *)&head, 1);
+        buffer_append_string_len(b, (const char *)&head, 1);
         if (mod_websocket_base64_encode((unsigned char **)&enc, &encsiz,
                                         (unsigned char *)payload, siz) != 0) {
             DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "fail to base64-encode");
             chunkqueue_reset(hctx->tocli);
+            buffer_free(b);
             return -1;
         }
         DEBUG_LOG(MOD_WEBSOCKET_LOG_DEBUG, "ss", "base64-encoded data:", enc, ", size = ", encsiz);
-        buffer_append_memory(b, enc, encsiz);
+        buffer_append_string_len(b, enc, encsiz);
         free(enc);
-        buffer_append_memory(b, (const char *)&tail, 1);
+        buffer_append_string_len(b, (const char *)&tail, 1);
         break;
     case MOD_WEBSOCKET_FRAME_TYPE_CLOSE:
-        buffer_append_memory(b, (const char *)&tail, 1);
-        buffer_append_memory(b, (const char *)&head, 1);
+        buffer_append_string_len(b, (const char *)&tail, 1);
+        buffer_append_string_len(b, (const char *)&head, 1);
         break;
     default:
         DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "invalid frame type");
+        buffer_free(b);
         return -1;
     }
     /* needs '\0' char to send */
-    buffer_append_memory(b, &endl, 1);
+    buffer_append_string_len(b, &endl, 1);
+    chunkqueue_append_buffer(hctx->tocli, b);
+    buffer_free(b);
+
     return 0;
 }
 
@@ -133,7 +139,7 @@
                         buffer_reset(payload);
                         return -1;
                     }
-                    buffer_append_memory(payload, &frame->ptr[i], frame->used - i - 1);
+                    buffer_append_string_len(payload, &frame->ptr[i], frame->used - i - 1);
                     i += frame->used - i - 1;
                 } else {
                     DEBUG_LOG(MOD_WEBSOCKET_LOG_DEBUG,
@@ -147,14 +153,14 @@
                         buffer_reset(payload);
                         return -1;
                     }
-                    buffer_append_memory(payload, &frame->ptr[i], pff - &frame->ptr[i]);
+                    buffer_append_string_len(payload, &frame->ptr[i], pff - &frame->ptr[i]);
                     i += (pff - &frame->ptr[i]);
                     hctx->frame.state = MOD_WEBSOCKET_FRAME_STATE_INIT;
                 }
                 i++;
                 if (hctx->frame.type == MOD_WEBSOCKET_FRAME_TYPE_TEXT && payload->used > 0) {
                     hctx->frame.ctl.siz = 0;
-                    b = chunkqueue_get_append_buffer(hctx->tosrv);
+                    b = buffer_init();
                     if (!b) {
                         DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "no memory");
                         chunkqueue_reset(hctx->tosrv);
@@ -162,13 +168,15 @@
                         buffer_reset(payload);
                         return -1;
                     }
-                    buffer_append_memory(b, payload->ptr, payload->used);
+                    buffer_append_string_len(b, payload->ptr, payload->used);
                     /* needs '\0' char to send */
-                    buffer_append_memory(b, &endl, 1);
+                    buffer_append_string_len(b, &endl, 1);
+                    chunkqueue_append_buffer(hctx->tosrv, b);
+                    buffer_free(b);
                     buffer_reset(payload);
                 } else {
                     if (hctx->frame.state == MOD_WEBSOCKET_FRAME_STATE_INIT && payload->used > 0) {
-                        b = chunkqueue_get_append_buffer(hctx->tosrv);
+                        b = buffer_init();
                         if (!b) {
                             DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "no memory");
                             chunkqueue_reset(hctx->tosrv);
@@ -183,11 +191,14 @@
                             DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "fail to base64-decode");
                             chunkqueue_reset(hctx->tosrv);
                             chunkqueue_reset(hctx->fromcli);
+                            buffer_free(b);
                             return -1;
                         }
-                        buffer_append_memory(b, b64, b64siz);
+                        buffer_append_string_len(b, b64, b64siz);
                         /* needs '\0' char to send */
-                        buffer_append_memory(b, &endl, 1);
+                        buffer_append_string_len(b, &endl, 1);
+                        chunkqueue_append_buffer(hctx->tosrv, b);
+                        buffer_free(b);
                         buffer_reset(payload);
                         free(b64);
                     }
@@ -217,7 +228,7 @@
     if (payload == NULL && (type == MOD_WEBSOCKET_FRAME_TYPE_TEXT || type == MOD_WEBSOCKET_FRAME_TYPE_BIN)) {
         return -1;
     }
-    b = chunkqueue_get_append_buffer(hctx->tocli);
+    b = buffer_init();
     if (!b) {
         DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "no memory");
         return -1;
@@ -245,17 +256,17 @@
         DEBUG_LOG(MOD_WEBSOCKET_LOG_DEBUG, "s", "type = close");
         break;
     }
-    buffer_append_memory(b, &c, 1);
+    buffer_append_string_len(b, &c, 1);
 
     DEBUG_LOG(MOD_WEBSOCKET_LOG_DEBUG, "sx", "payload size =", siz);
     if (siz < MOD_WEBSOCKET_FRAME_LEN16) {
         sizbuf[0] = siz;
-        buffer_append_memory(b, sizbuf, 1);
+        buffer_append_string_len(b, sizbuf, 1);
     } else if (siz <= UINT16_MAX) {
         sizbuf[0] = MOD_WEBSOCKET_FRAME_LEN16;
         sizbuf[1] = (siz >> 8) & 0xff;
         sizbuf[2] = siz & 0xff;
-        buffer_append_memory(b, sizbuf, MOD_WEBSOCKET_FRAME_LEN16_CNT + 1);
+        buffer_append_string_len(b, sizbuf, MOD_WEBSOCKET_FRAME_LEN16_CNT + 1);
     } else {
         memset(sizbuf, 0, sizeof(sizbuf));
         sizbuf[0] = MOD_WEBSOCKET_FRAME_LEN63;
@@ -263,17 +274,17 @@
         sizbuf[6] = (siz >> 16) & 0xff;
         sizbuf[7] = (siz >> 8) & 0xff;
         sizbuf[8] = siz & 0xff;
-        buffer_append_memory(b, sizbuf, MOD_WEBSOCKET_FRAME_LEN63_CNT + 1);
+        buffer_append_string_len(b, sizbuf, MOD_WEBSOCKET_FRAME_LEN63_CNT + 1);
     }
     if (siz == 0) {
-        /* needs '\0' char to send */
-        buffer_append_memory(b, &endl, 1);
+        chunkqueue_append_buffer(hctx->tocli, b);
+        buffer_free(b);
         DEBUG_LOG(MOD_WEBSOCKET_LOG_DEBUG, "sx", "frame size =", b->used - 1);
         return 0;
     }
-    buffer_append_memory(b, payload, siz);
-    /* needs '\0' char to send */
-    buffer_append_memory(b, &endl, 1);
+    buffer_append_string_len(b, payload, siz);
+    chunkqueue_append_buffer(hctx->tocli, b);
+    buffer_free(b);
     DEBUG_LOG(MOD_WEBSOCKET_LOG_DEBUG, "sx", "frame size =", b->used - 1);
     return 0;
 }
@@ -417,7 +428,7 @@
                 if (hctx->frame.ctl.siz <= (uint64_t)(frame->used - i - 1)) {
                     DEBUG_LOG(MOD_WEBSOCKET_LOG_DEBUG,
                               "sx", "read payload, size =", hctx->frame.ctl.siz);
-                    buffer_append_memory(payload, &frame->ptr[i],
+                    buffer_append_string_len(payload, &frame->ptr[i],
                                          (size_t)(hctx->frame.ctl.siz & SIZE_MAX));
                     i += (size_t)(hctx->frame.ctl.siz & SIZE_MAX);
                     hctx->frame.ctl.siz = 0;
@@ -429,7 +440,7 @@
                     DEBUG_LOG(MOD_WEBSOCKET_LOG_DEBUG,
                               "sx", "read payload, size =",
                               frame->used - i - 1);
-                    buffer_append_memory(payload, &frame->ptr[i], frame->used - i - 1);
+                    buffer_append_string_len(payload, &frame->ptr[i], frame->used - i - 1);
                     hctx->frame.ctl.siz -= (uint64_t)(frame->used - i - 1);
                     i += (frame->used - i - 1);
                     DEBUG_LOG(MOD_WEBSOCKET_LOG_DEBUG, "sx", "rest of payload size =", hctx->frame.ctl.siz);
@@ -438,17 +449,19 @@
                 case MOD_WEBSOCKET_FRAME_TYPE_TEXT:
                 case MOD_WEBSOCKET_FRAME_TYPE_BIN:
                     unmask_payload(hctx);
-                    b = chunkqueue_get_append_buffer(hctx->tosrv);
+                    b = buffer_init();
                     if (!b) {
                         DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "no memory");
                         chunkqueue_reset(hctx->fromcli);
                         buffer_reset(payload);
                         return -1;
                     }
-                    buffer_append_memory(b, payload->ptr, payload->used);
+                    buffer_append_string_len(b, payload->ptr, payload->used);
                     buffer_reset(payload);
                     /* needs '\0' char to send */
-                    buffer_append_memory(b, &endl, 1);
+                    buffer_append_string_len(b, &endl, 1);
+                    chunkqueue_append_buffer(hctx->tosrv, b);
+                    buffer_free(b);
                     break;
                 case MOD_WEBSOCKET_FRAME_TYPE_PING:
                     if (hctx->frame.ctl.siz == 0) {
@@ -490,14 +503,15 @@
     if (payload == NULL || siz == 0) {
         return 0;
     }
-    b = chunkqueue_get_append_buffer(hctx->tocli);
+    b = buffer_init();
     if (!b) {
         DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "no memory");
         return -1;
     }
-    buffer_append_memory(b, payload, siz);
-    /* needs '\0' char to send */
-    buffer_append_memory(b, &endl, 1);
+    /* '\0' included in buffer_append_string_len */
+    buffer_append_string_len(b, payload, siz);
+    chunkqueue_append_buffer(hctx->tocli, b);
+    buffer_free(b);
     return 0;
 }
 
@@ -513,12 +527,15 @@
         if (!frame) {
             continue;
         }
-        b = chunkqueue_get_append_buffer(hctx->tosrv);
+        b = buffer_init();
         if (!b) {
             DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "no memory");
             return -1;
         }
-        buffer_append_memory(b, frame->ptr, frame->used);
+        /* Don't include '\0' char in used buffer */
+        buffer_append_string_len(b, frame->ptr, frame->used - 1);
+        chunkqueue_append_buffer(hctx->tosrv, b);
+        buffer_free(b);
     }
     chunkqueue_reset(hctx->fromcli);
     return 0;
diff -ur lighttpd1.4.orig/src/mod_websocket_handshake.c lighttpd1.4.patched/src/mod_websocket_handshake.c
--- lighttpd1.4.orig/src/mod_websocket_handshake.c	2016-05-06 15:58:16.153431915 +0200
+++ lighttpd1.4.patched/src/mod_websocket_handshake.c	2016-05-06 16:49:40.653302913 +0200
@@ -297,12 +297,12 @@
         DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "Sec-WebSocket-Key is invalid");
         return MOD_WEBSOCKET_BAD_REQUEST;
     }
-    resp = chunkqueue_get_append_buffer(hctx->tocli);
+    resp = buffer_init();
     if (resp == NULL) {
         DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "no memory");
         return MOD_WEBSOCKET_INTERNAL_SERVER_ERROR;
     }
-    buffer_append_string(resp, const_hdr);
+    buffer_copy_string(resp, const_hdr);
     /* Sec-WebSocket-Origin header */
     if (!buffer_is_empty(hctx->handshake.origin)) {
         buffer_append_string(resp, "Sec-WebSocket-Origin: ");
@@ -310,6 +310,7 @@
         buffer_append_string(resp, "\r\n");
     } else {
         DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "Origin header is invalid");
+        buffer_free(resp);
         return MOD_WEBSOCKET_BAD_REQUEST;
     }
     /* Sec-WebSocket-Location header */
@@ -323,11 +324,14 @@
         buffer_append_string_buffer(resp, hctx->handshake.host);
     } else {
         DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "Host header does not exist");
+        buffer_free(resp);
         return MOD_WEBSOCKET_BAD_REQUEST;
     }
     buffer_append_string_buffer(resp, hctx->con->uri.path);
     buffer_append_string(resp, "\r\n\r\n");
     buffer_append_string_len(resp, (char *)md5sum, MD5_STRLEN);
+    chunkqueue_append_buffer(hctx->tocli, resp);
+    buffer_free(resp);
     return MOD_WEBSOCKET_OK;
 }
 #endif	/* _MOD_WEBSOCKET_SPEC_IETF_00_ */
@@ -368,13 +372,14 @@
         return MOD_WEBSOCKET_INTERNAL_SERVER_ERROR;
     }
 
-    resp = chunkqueue_get_append_buffer(hctx->tocli);
+    resp = buffer_init();
+
     if (resp == NULL) {
         free(accept_body);
         DEBUG_LOG(MOD_WEBSOCKET_LOG_ERR, "s", "no memory");
         return MOD_WEBSOCKET_INTERNAL_SERVER_ERROR;
     }
-    buffer_append_string(resp, const_hdr);
+    buffer_copy_string(resp, const_hdr);
     buffer_append_string(resp, "Sec-WebSocket-Accept: ");
     buffer_append_string_len(resp, (char *)accept_body, accept_body_siz);
     free(accept_body);
@@ -387,6 +392,8 @@
         buffer_append_string(resp, "\r\n");
     }
     buffer_append_string(resp, "\r\n");
+    chunkqueue_append_buffer(hctx->tocli, resp);
+    buffer_free(resp);
     return MOD_WEBSOCKET_OK;
 }
 #endif	/* _MOD_WEBSOCKET_SPEC_RFC_6455_ */
@@ -436,7 +443,7 @@
         } else {
             addr = buffer_init_string(info.peer.addr);
             port = buffer_init();
-            buffer_append_long(port, info.peer.port);
+            buffer_append_int(port, info.peer.port);
         }
 #else
         addr = buffer_init_string("unknown");
@@ -450,7 +457,7 @@
         } else {
             addr = buffer_init_string(info.peer.addr);
             port = buffer_init();
-            buffer_append_long(port, info.peer.port);
+            buffer_append_int(port, info.peer.port);
         }
     }
     hdrs = hctx->con->request.headers;
@@ -525,7 +532,8 @@
         return MOD_WEBSOCKET_INTERNAL_SERVER_ERROR;
     }
     append_x_forwarded_headers(hctx);
-    new_request = chunkqueue_get_append_buffer(hctx->tosrv);
+    new_request = buffer_init();
+
     buffer_append_string_buffer(new_request, hctx->con->request.request_line);
     buffer_append_string(new_request, "\r\n");
     hdrs = hctx->con->request.headers;
@@ -539,9 +547,11 @@
     buffer_append_string(new_request, "\r\n");
 
 #ifdef	_MOD_WEBSOCKET_SPEC_IETF_00_
+    buffer_string_prepare_append(hctx->handshake.key3, SEC_WEBSOCKET_KEY3_STRLEN);
     buffer_append_string_len(new_request, hctx->handshake.key3->ptr, SEC_WEBSOCKET_KEY3_STRLEN);
 #endif	/* _MOD_WEBSOCKET_SPEC_IETF_00_ */
-
+    chunkqueue_append_buffer(hctx->tosrv, new_request);
+    buffer_free(new_request);
     DEBUG_LOG(MOD_WEBSOCKET_LOG_DEBUG, "s", "forward handshake request");
     return MOD_WEBSOCKET_OK;
 }
diff -ur lighttpd1.4.orig/src/plugin.c lighttpd1.4.patched/src/plugin.c
--- lighttpd1.4.orig/src/plugin.c	2016-05-06 15:58:16.153431915 +0200
+++ lighttpd1.4.patched/src/plugin.c	2016-05-06 15:58:16.169431915 +0200
@@ -45,6 +45,7 @@
 	PLUGIN_FUNC_INIT,
 	PLUGIN_FUNC_CLEANUP,
 	PLUGIN_FUNC_SET_DEFAULTS,
+	PLUGIN_FUNC_READ_CONTINUOUS,
 
 	PLUGIN_FUNC_SIZEOF
 } plugin_t;
@@ -328,6 +329,7 @@
 PLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_DOCROOT, handle_docroot)
 PLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_PHYSICAL, handle_physical)
 PLUGIN_TO_SLOT(PLUGIN_FUNC_CONNECTION_RESET, connection_reset)
+PLUGIN_TO_SLOT(PLUGIN_FUNC_READ_CONTINUOUS, read_continuous)
 
 #undef PLUGIN_TO_SLOT
 
@@ -457,6 +459,7 @@
 		PLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_DOCROOT, handle_docroot);
 		PLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_PHYSICAL, handle_physical);
 		PLUGIN_TO_SLOT(PLUGIN_FUNC_CONNECTION_RESET, connection_reset);
+		PLUGIN_TO_SLOT(PLUGIN_FUNC_READ_CONTINUOUS, read_continuous);
 		PLUGIN_TO_SLOT(PLUGIN_FUNC_CLEANUP, cleanup);
 		PLUGIN_TO_SLOT(PLUGIN_FUNC_SET_DEFAULTS, set_defaults);
 #undef PLUGIN_TO_SLOT
diff -ur lighttpd1.4.orig/src/plugin.h lighttpd1.4.patched/src/plugin.h
--- lighttpd1.4.orig/src/plugin.h	2016-05-06 15:58:16.153431915 +0200
+++ lighttpd1.4.patched/src/plugin.h	2016-05-06 15:58:16.169431915 +0200
@@ -23,6 +23,7 @@
 #define PHYSICALPATH_FUNC  CONNECTION_FUNC
 #define REQUESTDONE_FUNC   CONNECTION_FUNC
 #define URIHANDLER_FUNC    CONNECTION_FUNC
+#define READ_CONT_FUNC     CONNECTION_FUNC
 
 #define PLUGIN_DATA        size_t id
 
@@ -55,6 +56,7 @@
 											    */
 	handler_t (* handle_subrequest)      (server *srv, connection *con, void *p_d);    /* */
 	handler_t (* connection_reset)       (server *srv, connection *con, void *p_d);    /* */
+	handler_t (* read_continuous)        (server *srv, connection *con, void *p_d);    /* */
 	void *data;
 
 	/* dlopen handle */
@@ -74,6 +76,7 @@
 handler_t plugins_call_handle_connection_close(server *srv, connection *con);
 handler_t plugins_call_handle_joblist(server *srv, connection *con);
 handler_t plugins_call_connection_reset(server *srv, connection *con);
+handler_t plugins_call_read_continuous(server *srv, connection *con);
 
 handler_t plugins_call_handle_trigger(server *srv);
 handler_t plugins_call_handle_sighup(server *srv);
